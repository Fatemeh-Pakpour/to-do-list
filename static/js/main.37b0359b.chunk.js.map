{"version":3,"sources":["components/Context/index.js","components/Header.js","components/NewTask.js","components/EditDelete.js","components/Task.js","components/TaskList.js","components/App.js","index.js"],"names":["todoListContext","React","createContext","Provider","state","tasks","title","date","moment","Date","format","id","handleAddNewTask","taskItem","setState","localStorage","setItem","JSON","stringify","handleRemoveTask","prevState","filter","task","handleEditTask","newTaskTitle","index","findIndex","newArray","splice","parse","getItem","this","value","actions","removeTask","addNewTask","editTask","props","children","Component","Consumer","Header","defaultProps","textInput","createRef","NewTask","changedDate","undefined","activeDateWidget","handleChange","current","focus","context","className","onSubmit","event","preventDefault","target","trim","length","reset","alert","type","name","ref","placeholder","selected","onChange","onSelect","handleClick","dateFormat","placeholderText","minDate","EditDelete","toggleForm","onClick","icon","faTrashAlt","faEdit","Task","isEditing","saveTask","taskTitle","isChecked","handleChecked","getStyle","textDecoration","defaultValue","faCheckCircle","style","PureComponent","TaskList","Fragment","map","key","App","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37b0359b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as moment from \"moment\";\r\n\r\n// this is going to setup the provide and consumer\r\nconst todoListContext = React.createContext();\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    tasks: [\r\n      {\r\n        title: \"ali\",\r\n        date: moment(new Date()).format(\"YYYY-MM-DD\"),\r\n        id: new Date()\r\n      }\r\n    ]\r\n  };\r\n\r\n  handleAddNewTask = (title, date) => {\r\n    const taskItem = {\r\n      title: title,\r\n      date: moment(date).format(\"YYYY-MM-DD\"),\r\n      // id: Math.random().toString(36).substr(2, 9)\r\n      id: new Date()\r\n    };\r\n\r\n    this.setState({ tasks: [...this.state.tasks, taskItem] }, () => {\r\n      localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [\r\n      {\r\n        title: \"Example Task\",\r\n        date: moment(new Date()).format(\"YYYY-MM-DD\"),\r\n        id: new Date()\r\n      }\r\n    ];\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n  handleRemoveTask = id => {\r\n    this.setState(\r\n      prevState => ({\r\n        tasks: prevState.tasks.filter(task => task.id !== id)\r\n      }),\r\n      () => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n      }\r\n    );\r\n  };\r\n  handleEditTask = (id, newTaskTitle) => {\r\n    const index = this.state.tasks.findIndex(task => task.id === id);\r\n    const newArray = [...this.state.tasks];\r\n    newArray.splice(index, 1, { ...newArray[index], title: newTaskTitle });\r\n    this.setState(\r\n      {\r\n        tasks: newArray\r\n      },\r\n      () => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <todoListContext.Provider\r\n        value={{\r\n          tasks: this.state.tasks,\r\n          actions: {\r\n            removeTask: this.handleRemoveTask,\r\n            addNewTask: this.handleAddNewTask,\r\n            editTask: this.handleEditTask\r\n          }\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </todoListContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = todoListContext.Consumer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string\r\n};\r\nHeader.defaultProps = {\r\n  title: \"To do list\"\r\n};\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Consumer } from \"./Context\";\r\n\r\n// Datepicker\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nlet textInput = React.createRef();\r\n\r\nclass NewTask extends Component {\r\n  state = {\r\n    changedDate: undefined,\r\n    activeDateWidget: false\r\n  };\r\n\r\n  handleClick() {\r\n    textInput.current.focus();\r\n  }\r\n\r\n  // changeActiveDateWidget = (event) => {\r\n  //   event.stopPropagation();\r\n  //   this.setState({\r\n  //     activeDateWidget: !this.state.activeDateWidget,\r\n  //   });\r\n  // }\r\n\r\n  handleChange = date => {\r\n    this.setState({ changedDate: date });\r\n  };\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {context => {\r\n          const handleSubmit = event => {\r\n            event.preventDefault();\r\n            const title = event.target.title.value.trim();\r\n            if (!title.length) {\r\n              alert(\"Please Enter Your Task to the List\");\r\n            } else {\r\n              context.actions.addNewTask(title, this.state.changedDate);\r\n              event.target.reset();\r\n            }\r\n          };\r\n\r\n          return (\r\n            <form className=\"task-form\" onSubmit={handleSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                ref={textInput}\r\n                placeholder=\"Enter task\"\r\n              />\r\n              <DatePicker\r\n                className=\"date-picker\"\r\n                selected={this.state.changedDate}\r\n                onChange={date => {\r\n                  // console.log(date);\r\n                  this.handleChange(date);\r\n                }}\r\n                onSelect={this.handleClick}\r\n                name=\"date\"\r\n                dateFormat=\"yyyy-MM-dd\"\r\n                placeholderText=\"YYYY-MM-DD\"\r\n                minDate={new Date()}\r\n              />\r\n              <input type=\"submit\" value=\"Add \" />\r\n            </form>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTask;\r\n","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { Consumer } from \"./Context\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst EditDelete = ({ id, toggleForm }) => {\r\n  return (\r\n    <Consumer>\r\n      {context => (\r\n        <span>\r\n          <button\r\n            className=\"remove-task style-icon\"\r\n            onClick={() => {\r\n              context.actions.removeTask(id);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faTrashAlt} />\r\n          </button>\r\n          <button\r\n            className=\"edit-task style-icon\"\r\n            onClick={() => {\r\n              toggleForm();\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faEdit} />\r\n          </button>\r\n        </span>\r\n      )}\r\n    </Consumer>\r\n  );\r\n};\r\n\r\n// EditDelete.propTypes = {\r\n//   id: PropTypes.string,\r\n//   toggleForm: PropTypes.func\r\n// };\r\nexport default EditDelete;\r\n","import React, { PureComponent } from \"react\";\r\nimport { Consumer } from \"./Context\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport EditDelete from \"./EditDelete\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\n\r\nclass Task extends PureComponent {\r\n  static propTypes = {\r\n    taskTitle: PropTypes.string.isRequired,\r\n    id: PropTypes.instanceOf(Date),\r\n    date: PropTypes.instanceOf(moment).isRequired,\r\n    removeTask: PropTypes.func\r\n  };\r\n\r\n  state = { isEditing: false };\r\n\r\n  saveTask = event => {\r\n    event.preventDefault();\r\n    const { id, editTask } = this.props;\r\n    const newTaskTitle = event.target.taskTitle.value;\r\n    editTask(id, newTaskTitle);\r\n    this.setState({\r\n      isEditing: false,\r\n      isChecked: false\r\n    });\r\n  };\r\n\r\n  toggleForm = () => {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    });\r\n  };\r\n\r\n  handleChecked =() =>{\r\n    this.setState({ isChecked: !this.state.isChecked });\r\n  }\r\n\r\n  getStyle = () =>{\r\n    return{\r\n      textDecoration:this.state.isChecked?'line-through' : 'none'\r\n    }    \r\n  };\r\n \r\n  render() {\r\n    const { taskTitle, id, date } = this.props;\r\n    return (\r\n      <div className=\"task\">\r\n        <Consumer>\r\n          {context => {\r\n            const saveTask = event => {\r\n              event.preventDefault();\r\n              const newTaskTitle = event.target.taskTitle.value;\r\n              context.actions.editTask(id, newTaskTitle);\r\n              this.setState({\r\n                isEditing: false\r\n              });\r\n            };\r\n            return (\r\n              <span className=\"task-title\">\r\n                {!this.state.isEditing ? (\r\n                  <div className=\"task-parent\">\r\n                    <input type=\"checkbox\" className=\"styled\" onChange={ this.handleChecked}/>\r\n                    <label className=\"label-task\" style={this.getStyle()}>{taskTitle}</label>\r\n                    <label className=\"label-date\">{date}</label>\r\n                  </div>\r\n                ) : (\r\n                  <form className=\"edit-form\" onSubmit={saveTask}>\r\n                    <input\r\n                      name=\"taskTitle\"\r\n                      type=\"text\"\r\n                      defaultValue={taskTitle}\r\n                    />\r\n                    <button>\r\n                      <FontAwesomeIcon icon={faCheckCircle} />\r\n                    </button>\r\n                  </form>\r\n                )}\r\n                <EditDelete\r\n                  id={id}\r\n                  isEditing={this.state.isEditing}\r\n                  toggleForm={this.toggleForm}\r\n                />\r\n              </span>\r\n            );\r\n          }}\r\n        </Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { Consumer } from \"./Context\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  return (\r\n    <Consumer>\r\n      {context => (\r\n        <React.Fragment>\r\n          {context.tasks.map(task => (\r\n            <Task\r\n              taskTitle={task.title}\r\n              date={task.date}\r\n              id={task.id}\r\n              key={task.id}\r\n              removeTask={props.removeTask}\r\n              editTask={props.editTask}\r\n            />\r\n          ))}\r\n        </React.Fragment>\r\n      )}\r\n    </Consumer>\r\n  );\r\n};\r\n\r\n// TaskList.propTypes = {\r\n//   removeTask: PropTypes.func.isRequired,\r\n//   editTask: PropTypes.func.isRequired\r\n// };\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NewTask from \"./NewTask\";\nimport Container from \"react-bootstrap/Container\";\nimport TaskList from \"./TaskList\";\n\nconst App = () => {\n  return (\n    <Container className=\"todo-ist\">\n      <Header />\n      <Container className=\"tasks-container\">\n        <TaskList />\n      </Container>\n      <NewTask />\n    </Container>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Provider } from \"./components/Context\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}