{"version":3,"sources":["components/Context/index.js","components/Header.js","components/NewTask.js","components/EditDelete.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["todoListContext","React","createContext","Provider","state","tasks","handleChecked","setState","isChecked","handleStyle","textDecoration","handleAddNewTask","title","date","taskItem","moment","format","id","Date","localStorage","setItem","JSON","stringify","handleRemoveTask","prevState","filter","task","handleEditTask","newTaskTitle","index","findIndex","newArray","splice","parse","getItem","this","value","actions","removeTask","addNewTask","editTask","props","children","Component","Consumer","Header","defaultProps","textInput","createRef","NewTask","changedDate","undefined","activeDateWidget","handleChange","current","focus","context","className","onSubmit","event","preventDefault","target","trim","length","reset","alert","type","name","ref","placeholder","selected","onChange","onSelect","handleClick","dateFormat","placeholderText","minDate","EditDelete","toggleForm","onClick","icon","faTrashAlt","faEdit","Task","isEditing","saveTask","taskTitle","getStyle","defaultValue","faCheckCircle","style","PureComponent","TaskList","Fragment","map","key","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bbb1621.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport * as moment from \"moment\";\r\n\r\n// this is going to setup the provide and consumer\r\nconst todoListContext = React.createContext();\r\n\r\nexport class Provider extends Component{\r\n    state = {\r\n        tasks: []\r\n    };\r\n    handleChecked =() =>{\r\n      this.setState({ isChecked: !this.state.isChecked });\r\n  }\r\n  handleStyle = ()=>{\r\n    return{\r\n      textDecoration: this.state.isChecked ? 'line-through' : 'none'\r\n    }\r\n  }\r\n    handleAddNewTask = (title, date) => {\r\n        const taskItem = {\r\n          title,\r\n          date: moment(date).format(\"YYYY-MM-DD\"),\r\n          id: new Date(),\r\n        };\r\n    \r\n        this.setState({ tasks: [...this.state.tasks, taskItem] }, () => {\r\n          localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n        });\r\n      };\r\n    \r\n      componentDidMount() {\r\n        const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n        this.setState({\r\n          tasks: tasks\r\n        });\r\n      }\r\n      handleRemoveTask = id => {\r\n        this.setState(\r\n          prevState => ({\r\n            tasks: prevState.tasks.filter(task => task.id !== id)\r\n          }),\r\n          () => {\r\n            localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n          }\r\n        );\r\n      };\r\n      handleEditTask = (id, newTaskTitle) => {\r\n        const index = this.state.tasks.findIndex(task => task.id === id);\r\n        const newArray = [...this.state.tasks];\r\n        newArray.splice(index, 1, { ...newArray[index], title: newTaskTitle });\r\n        this.setState(\r\n          {\r\n            tasks: newArray\r\n          },\r\n          () => {\r\n            localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n          }\r\n        );\r\n      };\r\n    \r\nrender(){\r\n    return (\r\n        <todoListContext.Provider\r\n        value={{\r\n          tasks: this.state.tasks,\r\n          actions: {\r\n            removeTask: this.handleRemoveTask,\r\n            addNewTask: this.handleAddNewTask,\r\n            editTask: this.handleEditTask\r\n          }\r\n        }}> \r\n          {this.props.children}\r\n        </todoListContext.Provider>\r\n\r\n    );\r\n}\r\n}\r\n\r\nexport const Consumer = todoListContext.Consumer;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string\r\n};\r\nHeader.defaultProps = {\r\n  title: \"To do list\"\r\n};\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Consumer } from \"./Context\";\r\n\r\n// Datepicker\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nlet textInput = React.createRef();\r\n\r\nclass NewTask extends Component {\r\n  state = {\r\n    changedDate: undefined,\r\n    activeDateWidget: false\r\n  };\r\n\r\n  handleClick() {\r\n    textInput.current.focus();\r\n  }\r\n\r\n  // changeActiveDateWidget = (event) => {\r\n  //   event.stopPropagation();\r\n  //   this.setState({\r\n  //     activeDateWidget: !this.state.activeDateWidget,\r\n  //   });\r\n  // }\r\n\r\n  handleChange = date => {\r\n    this.setState({ changedDate: date });\r\n  };\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {context => {\r\n          const handleSubmit = event => {\r\n            event.preventDefault();\r\n            const title = event.target.title.value.trim();\r\n            if (!title.length) {\r\n              alert(\"Please Enter Your Task to the List\");\r\n            } else {\r\n              context.actions.addNewTask(title, this.state.changedDate);\r\n              event.target.reset();\r\n            }\r\n          };\r\n\r\n          return (\r\n            <form className=\"task-form\" onSubmit={handleSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                ref={textInput}\r\n                placeholder=\"Enter task\"\r\n              />\r\n              <DatePicker\r\n                className=\"date-picker\"\r\n                selected={this.state.changedDate}\r\n                onChange={date => {\r\n                  // console.log(date);\r\n                  this.handleChange(date);\r\n                }}\r\n                onSelect={this.handleClick}\r\n                name=\"date\"\r\n                dateFormat=\"yyyy-MM-dd\"\r\n                placeholderText=\"YYYY-MM-DD\"\r\n                minDate={new Date()}\r\n              />\r\n              <input type=\"submit\" value=\"Add \" />\r\n            </form>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTask;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"./Context\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst EditDelete = ({ id, toggleForm }) => {\r\n  return (\r\n    <Consumer>\r\n      {context => (\r\n        <span>\r\n          <button\r\n            className=\"remove-task style-icon\"\r\n            onClick={() => {\r\n              context.actions.removeTask(id);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faTrashAlt} />\r\n          </button>\r\n          <button\r\n            className=\"edit-task style-icon\"\r\n            onClick={() => {\r\n              toggleForm();\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faEdit} />\r\n          </button>\r\n        </span>\r\n      )}\r\n    </Consumer>\r\n  );\r\n};\r\n\r\nEditDelete.propTypes = {\r\n  id: PropTypes.instanceOf(Date),\r\n  toggleForm: PropTypes.func\r\n};\r\nexport default EditDelete;\r\n","import React, { PureComponent } from \"react\";\r\nimport { Consumer } from \"./Context\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport EditDelete from \"./EditDelete\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\n\r\nclass Task extends PureComponent {\r\n  static propTypes = {\r\n    taskTitle: PropTypes.string.isRequired,\r\n    id: PropTypes.instanceOf(Date),\r\n    date: PropTypes.instanceOf(moment).isRequired,\r\n    removeTask: PropTypes.func\r\n  };\r\n\r\n  state = { isEditing: false };\r\n\r\n  saveTask = event => {\r\n    event.preventDefault();\r\n    const { id, editTask } = this.props;\r\n    const newTaskTitle = event.target.taskTitle.value;\r\n    editTask(id, newTaskTitle);\r\n    this.setState({\r\n      isEditing: false,\r\n      isChecked: false\r\n    });\r\n  };\r\n\r\n  toggleForm = () => {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    });\r\n  };\r\n\r\n  handleChecked =() =>{\r\n    this.setState({ isChecked: !this.state.isChecked });\r\n  }\r\n\r\n  getStyle = () =>{\r\n    return{\r\n      textDecoration:this.state.isChecked?'line-through' : 'none'\r\n    }    \r\n  };\r\n \r\n  render() {\r\n    const { taskTitle, id, date } = this.props;\r\n    return (\r\n      <div className=\"task\">\r\n        <Consumer>\r\n          {context => {\r\n            const saveTask = event => {\r\n              event.preventDefault();\r\n              const newTaskTitle = event.target.taskTitle.value;\r\n              context.actions.editTask(id, newTaskTitle);\r\n              this.setState({\r\n                isEditing: false\r\n              });\r\n            };\r\n            return (\r\n              <span className=\"task-title\">\r\n                {!this.state.isEditing ? (\r\n                  <div className=\"task-parent\">\r\n                    <input type=\"checkbox\" className=\"styled\" onChange={ this.handleChecked}/>\r\n                    <label className=\"label-task\" style={this.getStyle()}>{taskTitle}</label>\r\n                    <label className=\"label-date\">{date}</label>\r\n                  </div>\r\n                ) : (\r\n                  <form className=\"edit-form\" onSubmit={saveTask}>\r\n                    <input\r\n                      name=\"taskTitle\"\r\n                      type=\"text\"\r\n                      defaultValue={taskTitle}\r\n                    />\r\n                    <button>\r\n                      <FontAwesomeIcon icon={faCheckCircle} />\r\n                    </button>\r\n                  </form>\r\n                )}\r\n                <EditDelete\r\n                  id={id}\r\n                  isEditing={this.state.isEditing}\r\n                  toggleForm={this.toggleForm}\r\n                />\r\n              </span>\r\n            );\r\n          }}\r\n        </Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"./Context\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  return (\r\n    <Consumer>\r\n      {context => (\r\n        <React.Fragment>\r\n          {context.tasks.map(task => (\r\n            <Task\r\n              taskTitle={task.title}\r\n              date={task.date}\r\n              id={task.id}\r\n              key={task.id}\r\n              removeTask={props.removeTask}\r\n              editTask={props.editTask}\r\n            />\r\n          ))}\r\n        </React.Fragment>\r\n      )}\r\n    </Consumer>\r\n  );\r\n};\r\n\r\nTaskList.propTypes = {\r\n  removeTask: PropTypes.func.isRequired,\r\n  editTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NewTask from \"./NewTask\";\nimport Container from \"react-bootstrap/Container\";\nimport TaskList from \"./TaskList\";\n\nconst App = () => {\n  return (\n    <Container className=\"todo-ist\">\n      <Header />\n      <Container className=\"tasks-container\">\n        <TaskList />\n      </Container>\n      <NewTask />\n    </Container>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Provider } from \"./components/Context\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}